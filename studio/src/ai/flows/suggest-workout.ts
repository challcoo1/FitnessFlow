// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Suggests personalized workout recommendations based on user input and fitness goals.
 *
 * - suggestWorkout - A function that handles the workout suggestion process.
 * - SuggestWorkoutInput - The input type for the suggestWorkout function.
 * - SuggestWorkoutOutput - The return type for the suggestWorkout function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const SuggestWorkoutInputSchema = z.object({
  workoutData: z.string().describe('The user-provided workout data in natural language.'),
  fitnessGoals: z.string().optional().describe('Optional fitness goals of the user.'),
});
export type SuggestWorkoutInput = z.infer<typeof SuggestWorkoutInputSchema>;

const ParsedWorkoutDataSchema = z.object({
  exercises: z.array(z.object({
    name: z.string().describe('The name of the exercise.'),
    sets: z.number().int().min(1).describe('The number of sets for the exercise.'),
    reps: z.number().int().min(1).describe('The number of repetitions for the exercise.'),
    weight: z.number().optional().describe('The weight used for the exercise, if applicable.'),
    unit: z.string().optional().describe('The unit of weight (e.g., lbs, kg).'),
  })).describe('A structured representation of the workout exercises.'),
});
export type ParsedWorkoutData = z.infer<typeof ParsedWorkoutDataSchema>;

const WorkoutRecommendationSchema = z.object({
  recommendations: z.string().describe('Workout recommendations based on the parsed data and fitness goals.'),
});
export type SuggestWorkoutOutput = z.infer<typeof WorkoutRecommendationSchema>;


const parseWorkoutData = ai.defineTool(
  {
    name: 'parseWorkoutData',
    description: 'Parses workout data from natural language into a structured format.',
    inputSchema: z.object({
      workoutData: z.string().describe('The user-provided workout data in natural language.'),
    }),
    outputSchema: ParsedWorkoutDataSchema,
  },
  async input => {
    // Placeholder implementation - replace with actual parsing logic
    // In a real application, this might use an LLM or a dedicated NLP library
    // to extract structured data from the input.
    // For now, we'll return dummy data.
    console.log('Parsing workout data:', input.workoutData);
    return {
      exercises: [
        {
          name: 'Example Exercise',
          sets: 3,
          reps: 10,
          weight: 50,
          unit: 'lbs',
        },
      ],
    };
  }
);

export async function suggestWorkout(input: SuggestWorkoutInput): Promise<SuggestWorkoutOutput> {
  return suggestWorkoutFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestWorkoutPrompt',
  input: {
    schema: z.object({
      parsedWorkoutData: ParsedWorkoutDataSchema.describe('The parsed workout data.'),
      fitnessGoals: z.string().optional().describe('Optional fitness goals of the user.'),
    }),
  },
  output: {
    schema: WorkoutRecommendationSchema,
  },
  prompt: `You are a personal fitness trainer. Based on the user's workout data and fitness goals, generate personalized workout recommendations.

Workout Data:
{{#each parsedWorkoutData.exercises}}
  - Exercise: {{this.name}}, Sets: {{this.sets}}, Reps: {{this.reps}}{{#if this.weight}}, Weight: {{this.weight}} {{this.unit}}{{/if}}
{{/each}}

{{#if fitnessGoals}}
Fitness Goals: {{fitnessGoals}}
{{/if}}

Recommendations:`, // Use triple curly braces for Handlebars variables
});

const suggestWorkoutFlow = ai.defineFlow<
  typeof SuggestWorkoutInputSchema,
  typeof WorkoutRecommendationSchema
>({
  name: 'suggestWorkoutFlow',
  inputSchema: SuggestWorkoutInputSchema,
  outputSchema: WorkoutRecommendationSchema,
}, async input => {
  const {workoutData, fitnessGoals} = input;

  const parsedData = await parseWorkoutData({
    workoutData: workoutData,
  });

  const {output} = await prompt({
    parsedWorkoutData: parsedData,
    fitnessGoals: fitnessGoals,
  });
  return output!;
});

